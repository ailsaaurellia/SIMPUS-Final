/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cobacoba;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import static org.eclipse.persistence.expressions.ExpressionOperator.trim;
import persisten.Buku;

/**
 *
 * @author Ailsa
 */
public class GUIBuku extends javax.swing.JFrame {

    private Timer refreshTimer;

    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }

    ArrayList<Buku> dataBuku;

    private void tampil() {
        dataBuku.clear();
        EntityManager entityManager = Persistence.createEntityManagerFactory("UASPBOPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<Buku> querySelectAll = entityManager.createNamedQuery("Buku.findAll", Buku.class);
        List<Buku> results = querySelectAll.getResultList();

        DefaultTableModel model = (DefaultTableModel) jTableBuku.getModel();
        model.setRowCount(0);
        for (Buku data : results) {
            Object[] baris = new Object[8];
            baris[0] = data.getIdbuku();
            baris[1] = data.getIsbn();
            baris[2] = data.getJudul();
            baris[3] = data.getKategori();
            baris[4] = data.getPengarang();
            baris[5] = data.getPenerbit();
            baris[6] = data.getTahun();
            baris[7] = data.getHalaman();
            model.addRow(baris);
        }
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    private void kosongkan_form() {
        jTextId.setEditable(true);
        jTextId.setText("");
        jTextIsbn.setText("");
        jTextJudul.setText("");
        jTextSubjudul.setText("");
        jTextPengarang.setText("");
        jTextPenerbit.setText("");
        jTextTahun.setText("");
        jTextHalaman.setText("");
    }

    /**
     * Creates new form GUIBuku
     */
    public GUIBuku() {
        try {
            dataBuku = new ArrayList<>();
            initComponents();
            Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/Simpus", "postgres", "Chanhee98");
            tampil();
            kosongkan_form();

        } catch (SQLException ex) {
            Logger.getLogger(GUIBuku.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBuku = new javax.swing.JTable();
        jButtonTambah = new javax.swing.JButton();
        jButtonBack = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jComboCari = new javax.swing.JComboBox<>();
        jTextSearch = new javax.swing.JTextField();
        jTextJudul = new javax.swing.JTextField();
        jTextId = new javax.swing.JTextField();
        jTextIsbn = new javax.swing.JTextField();
        jTextSubjudul = new javax.swing.JTextField();
        jTextPengarang = new javax.swing.JTextField();
        jTextPenerbit = new javax.swing.JTextField();
        jTextHalaman = new javax.swing.JTextField();
        jTextTahun = new javax.swing.JTextField();
        jButtonCetak = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableBuku.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "ISBN", "Judul", "Kategori", "Pengarang", "Penerbit", "Tahun", "Jumlah Halaman"
            }
        ));
        jTableBuku.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBukuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableBuku);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 520, 1258, 170));

        jButtonTambah.setBackground(new java.awt.Color(102, 102, 255));
        jButtonTambah.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonTambah.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTambah.setText("TAMBAH");
        jButtonTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTambahActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonTambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 190, 120, 40));

        jButtonBack.setBackground(new java.awt.Color(204, 0, 51));
        jButtonBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBack.setForeground(new java.awt.Color(255, 255, 255));
        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 710, 80, 30));

        jButtonDelete.setBackground(new java.awt.Color(255, 102, 102));
        jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonDelete.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 330, 120, 40));

        jButtonUpdate.setBackground(new java.awt.Color(255, 102, 51));
        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonUpdate.setForeground(new java.awt.Color(255, 255, 255));
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 260, 120, 40));

        jComboCari.setBackground(new java.awt.Color(204, 255, 255));
        jComboCari.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboCari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Berdasarkan", "ISBN", "Judul", "Subjudul", "Pengarang", "Penerbit", "Tahun" }));
        jComboCari.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jComboCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboCariActionPerformed(evt);
            }
        });
        getContentPane().add(jComboCari, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 450, 120, 40));

        jTextSearch.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSearchActionPerformed(evt);
            }
        });
        jTextSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextSearchKeyReleased(evt);
            }
        });
        getContentPane().add(jTextSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 460, 330, 30));

        jTextJudul.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextJudul.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextJudul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextJudulActionPerformed(evt);
            }
        });
        getContentPane().add(jTextJudul, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 280, 200, 30));
        getContentPane().add(jTextId, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 400, 210, -1));

        jTextIsbn.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextIsbn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTextIsbn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextIsbnActionPerformed(evt);
            }
        });
        getContentPane().add(jTextIsbn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 220, 200, 30));

        jTextSubjudul.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextSubjudul.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextSubjudul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSubjudulActionPerformed(evt);
            }
        });
        getContentPane().add(jTextSubjudul, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 200, 30));

        jTextPengarang.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextPengarang.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextPengarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextPengarangActionPerformed(evt);
            }
        });
        getContentPane().add(jTextPengarang, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 410, 200, 30));

        jTextPenerbit.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextPenerbit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextPenerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextPenerbitActionPerformed(evt);
            }
        });
        getContentPane().add(jTextPenerbit, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 210, 200, 30));

        jTextHalaman.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextHalaman.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextHalaman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextHalamanActionPerformed(evt);
            }
        });
        getContentPane().add(jTextHalaman, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 340, 200, 30));

        jTextTahun.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextTahun.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jTextTahun, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 270, 200, 30));

        jButtonCetak.setBackground(new java.awt.Color(226, 177, 0));
        jButtonCetak.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonCetak.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCetak.setText("CETAK");
        jButtonCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCetakActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCetak, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 710, 110, 40));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambaran/Buku (3).png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1440, 810));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        GUIMenu menu = new GUIMenu();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jTextSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextSearchActionPerformed

    private void jButtonTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTambahActionPerformed
        // TODO add your handling code here:
        String id = jTextId.getText().trim();
        String isbn = jTextIsbn.getText();
        String judul = jTextJudul.getText();
        String kategori = jTextSubjudul.getText();
        String pengarang = jTextPengarang.getText();
        String penerbit = jTextPenerbit.getText();
        String tahun = jTextTahun.getText();
        String jumlah = jTextHalaman.getText();

        // awal persistence
        EntityManager entityManager = Persistence.createEntityManagerFactory("UASPBOPU").createEntityManager();
        entityManager.getTransaction().begin();
        Buku b = new Buku();
        b.setIdbuku(id);
        b.setIsbn(isbn);
        b.setJudul(judul);
        b.setKategori(kategori);
        b.setPengarang(pengarang);
        b.setPenerbit(penerbit);
        b.setTahun(tahun);
        b.setHalaman(jumlah);
        entityManager.persist(b);
        entityManager.getTransaction().commit();
        // akhir persistence

        jTextId.setText("");
        jTextIsbn.setText("");
        jTextJudul.setText("");
        jTextSubjudul.setText("");
        jTextPengarang.setText("");
        jTextPenerbit.setText("");
        jTextTahun.setText("");
        jTextHalaman.setText("");

        DefaultTableModel model = (DefaultTableModel) jTableBuku.getModel();
        model.setRowCount(0);
        tampil();

        if (!id.isEmpty()) {
            // TODO add your handling code here:
            if (!id.isEmpty()) {
                this.peringatan("Simpan Berhasil");
            } else {
                this.peringatan("Simpan Gagal");
            }
        } else {
            this.peringatan("Input Data buku Gagal");
        }

    }//GEN-LAST:event_jButtonTambahActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
         String id = jTextId.getText().trim();
        String isbn = jTextIsbn.getText();
        String judul = jTextJudul.getText();
        String kategori = jTextSubjudul.getText();
        String pengarang = jTextPengarang.getText();
        String penerbit = jTextPenerbit.getText();
        String tahun = jTextTahun.getText();
        String jumlah = jTextHalaman.getText();

        // awal persistence
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("UASPBOPU");
        EntityManager em = emf.createEntityManager();
        Buku b = new Buku();
       b.setIdbuku(id);
        b.setIsbn(isbn);
        b.setJudul(judul);
        b.setKategori(kategori);
        b.setPengarang(pengarang);
        b.setPenerbit(penerbit);
        b.setTahun(tahun);
        b.setHalaman(jumlah);

        em.getTransaction().begin();
        em.merge(b);
        em.getTransaction().commit();
        // akhir persistence

        jTextId.setText("");
        jTextIsbn.setText("");
        jTextJudul.setText("");
        jTextSubjudul.setText("");
        jTextPengarang.setText("");
        jTextPenerbit.setText("");
        jTextTahun.setText("");
        jTextHalaman.setText("");

        DefaultTableModel model = (DefaultTableModel) jTableBuku.getModel();
        model.setRowCount(0);
        tampil();

        if (!isbn.isEmpty()) {
            this.peringatan("Update data Berhasil");
        } else {
            this.peringatan("Update data Gagal");
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        String id = jTextId.getText().trim();

        // awal persistence
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("UASPBOPU");
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();

        Buku b = em.find(Buku.class, id);

        em.remove(b);
        em.getTransaction().commit();
        // akhir persistence

        jTextId.setText("");
        kosongkan_form();
        DefaultTableModel model = (DefaultTableModel) jTableBuku.getModel();
        model.setRowCount(0);
        tampil();

        if (!id.isEmpty()) {
            if (!id.isEmpty()) {
                this.peringatan("Hapus data Berhasil");
            } else {
                this.peringatan("Hapus data Gagal");
            }
        } else {
            this.peringatan("Wajib input id buku");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTextSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextSearchKeyReleased
        // TODO add your handling code here:
        try {
            String selection = (String) jComboCari.getSelectedItem();
            String searchTerm = jTextSearch.getText().trim();

            // Check if a search criteria is selected
            if (selection == null || selection.isEmpty()) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT b FROM Buku b WHERE ";

            switch (selection.toLowerCase()) {
                case "isbn":
                    queryString += "LOWER(b.isbn) LIKE LOWER(:searchTerm)";
                    break;
                case "judul":
                    queryString += "LOWER(b.judul) LIKE LOWER(:searchTerm)";
                    break;
                case "subjudul":
                    queryString += "LOWER(b.kategori) LIKE LOWER(:searchTerm)";
                    break;
                case "pengarang":
                    queryString += "LOWER(b.pengarang) LIKE LOWER(:searchTerm)";
                    break;
                case "penerbit":
                    queryString += "LOWER(b.penerbit) LIKE LOWER(:searchTerm)";
                    break;
                case "tahun":
                    queryString += "LOWER(b.tahun) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    queryString += "LOWER(b.isbn) LIKE LOWER(:searchTerm)"
                            + " OR LOWER(b.judul) LIKE LOWER(:searchTerm)"
                            + " OR LOWER(b.kategori) LIKE LOWER(:searchTerm)"
                            + " OR LOWER(b.pengarang) LIKE LOWER(:searchTerm)"
                            + " OR LOWER(b.penerbit) LIKE LOWER(:searchTerm)"
                            + " OR LOWER(b.tahun) LIKE LOWER(:searchTerm)";
                    break;
            }

            // Create and execute the JPA query
            EntityManager em = null;

            try {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("UASPBOPU");
                em = emf.createEntityManager();

                TypedQuery<Buku> query = em.createQuery(queryString, Buku.class);
                query.setParameter("searchTerm", "%" + searchTerm + "%");

                List<Buku> results = query.getResultList();

                DefaultTableModel dataModel = new DefaultTableModel();

                // Add columns to the model
                dataModel.addColumn("ISBN");
                dataModel.addColumn("Judul");
                dataModel.addColumn("Subjudul");
                dataModel.addColumn("Pengarang");
                dataModel.addColumn("Penerbit");
                dataModel.addColumn("Tahun");
                dataModel.addColumn("Jumlah Halaman");

                // Tambahkan kolom lain sesuai kebutuhan
                for (Buku result : results) {
                    Object[] rowData = {
                        result.getIsbn(),
                        result.getJudul(),
                        result.getKategori(),
                        result.getPengarang(),
                        result.getPenerbit(),
                        result.getTahun(),
                        result.getHalaman(),};
                    dataModel.addRow(rowData);
                }

                // Set jTableBuku with the created model
                jTableBuku.setModel(dataModel);

            } catch (IllegalArgumentException ex) {
                // Handle the case where no search criteria selected
                ex.printStackTrace();
            } catch (Exception ex) {
                // Handle other exceptions
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jTextSearchKeyReleased

    private void jTextJudulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextJudulActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextJudulActionPerformed

    private void jTextSubjudulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSubjudulActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextSubjudulActionPerformed

    private void jTextPengarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextPengarangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPengarangActionPerformed

    private void jTextHalamanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextHalamanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextHalamanActionPerformed

    private void jTextPenerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextPenerbitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPenerbitActionPerformed

    private void jTableBukuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBukuMouseClicked
        // TODO add your handling code here:
        int baris = jTableBuku.rowAtPoint(evt.getPoint());
        
        String id = jTableBuku.getValueAt(baris, 0).toString();
        jTextId.setText(id);

        String isbn = jTableBuku.getValueAt(baris, 1).toString();
        jTextIsbn.setText(isbn);

        String judul = jTableBuku.getValueAt(baris, 2).toString();
        jTextJudul.setText(judul);

        String subjudul = jTableBuku.getValueAt(baris, 3).toString();
        jTextSubjudul.setText(subjudul);

        String pengarang = jTableBuku.getValueAt(baris, 4).toString();
        jTextPengarang.setText(pengarang);

        String penerbit = jTableBuku.getValueAt(baris, 5).toString();
        jTextPenerbit.setText(penerbit);

        String tahun = jTableBuku.getValueAt(baris, 6).toString();
        jTextTahun.setText(tahun);

        String jumlah = jTableBuku.getValueAt(baris, 7).toString();
        jTextHalaman.setText(jumlah);

    }//GEN-LAST:event_jTableBukuMouseClicked

    private void jComboCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboCariActionPerformed

    private void jTextIsbnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextIsbnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextIsbnActionPerformed

    private void jButtonCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCetakActionPerformed
        // TODO add your handling code here:
        try {
            String reportPath = "src/Cetak/Bukuku.jrxml";
            String selection = ((String) jComboCari.getSelectedItem()).toLowerCase();
            String searchTerm = jTextSearch.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT b FROM Buku b WHERE ";

            switch (selection.toLowerCase()) {
                case "isbn":
                    queryString += "LOWER(b.isbn) LIKE LOWER(:searchTerm)";
                    break;
                case "judul":
                    queryString += "LOWER(b.judul) LIKE LOWER(:searchTerm)";
                    break;
                case "subjudul":
                    queryString += "LOWER(b.subjudul) LIKE LOWER(:searchTerm)";
                    break;
                case "pengarang":
                    queryString += "LOWER(b.pengarang) LIKE LOWER(:searchTerm)";
                    break;
                case "penerbit":
                    queryString += "LOWER(b.penerbit) LIKE LOWER(:searchTerm)";
                    break;
                case "tahun":
                    queryString += "LOWER(b.tahun) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    queryString += "1=1";
            }

            EntityManagerFactory emf = Persistence.createEntityManagerFactory("UASPBOPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<Buku> cq = cb.createQuery(Buku.class);
            Root<Buku> bok = cq.from(Buku.class);
            cq.select(bok);

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<Buku> q = em.createQuery(cq);
            List<Buku> list = q.getResultList();
            Query query = em.createQuery(queryString);

            if (queryString.contains(":searchTerm")) {
                query.setParameter("searchTerm", "%" + searchTerm + "%");
            }
            List<Buku> results = query.getResultList();
            
            Map<String, Object> parameter = new HashMap<>();
            parameter.put("querySearch", searchTerm);
            parameter.put("searchBy", selection);
            
            // Menyiapkan data untuk laporan
            List<Object[]> data = new ArrayList<>();
            for (Buku result : results) {
                Object[] rowData = {
                    result.getIsbn(),
                    result.getJudul(),
                    result.getKategori(),
                    result.getPengarang(),
                    result.getPenerbit(),
                    result.getTahun(),
                    result.getHalaman(),};
                data.add(rowData);
            }
            em.getTransaction().commit();
            em.close();
            emf.close();

            // Membuat sumber data untuk JasperReports dari data hasil pencarian
            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(results);

            // Memuat file desain laporan (*.jrxml)
            JasperReport jasperReport = JasperCompileManager.compileReport(reportPath);
            JasperPrint print = JasperFillManager.fillReport(jasperReport, parameter, dataSource);
            JasperViewer viewer = new JasperViewer(print, false);
            viewer.setVisible(true);

        } catch (JRException ex) {
            Logger.getLogger(GUIBuku.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonCetakActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIBuku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonCetak;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonTambah;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboCari;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableBuku;
    private javax.swing.JTextField jTextHalaman;
    private javax.swing.JTextField jTextId;
    private javax.swing.JTextField jTextIsbn;
    private javax.swing.JTextField jTextJudul;
    private javax.swing.JTextField jTextPenerbit;
    private javax.swing.JTextField jTextPengarang;
    private javax.swing.JTextField jTextSearch;
    private javax.swing.JTextField jTextSubjudul;
    private javax.swing.JTextField jTextTahun;
    // End of variables declaration//GEN-END:variables
}
